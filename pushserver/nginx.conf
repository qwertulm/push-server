pid         logs/nginx.pid;
error_log   logs/nginx-main_error.log debug;

# Development Mode
master_process      off;
daemon              off;
worker_rlimit_core  2500M;
working_directory /tmp;
debug_points abort;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
#env MOCKEAGAIN;
env LD_PRELOAD;

worker_processes    2;

events {
    worker_connections  1024;
    use                 epoll;
}

http {
    postpone_output 1; # only postpone a single byte, default 1460 bytes
    access_log      logs/nginx-http_access.log;

    push_stream_shared_memory_size                100m;
    push_stream_max_channel_id_length             200;
    # max messages to store in memory
    push_stream_max_messages_stored_per_channel   20;
    # message ttl
    push_stream_message_ttl                       5m;
    # ping frequency
    push_stream_ping_message_interval             30s;
    # connection ttl to enable recycle
    push_stream_subscriber_connection_ttl         15m;
    # connection ttl for long polling
    push_stream_longpolling_connection_ttl        30s;
    push_stream_timeout_with_body                 off;

    # wildcard
    push_stream_wildcard_channel_prefix         "broad_";
    push_stream_wildcard_channel_max_qtd        3;

    push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\", \"tag\":\"~tag~\", \"time\":\"~time~\", \"eventid\":\"~event-id~\"}";

    # subscriber may create channels on demand or only authorized (publisher) may do it?
    push_stream_authorized_channels_only        off;

    push_stream_allowed_origins                 "*";

    server {
        listen           9080 default_server;
        #listen          9443 ssl;
        #ssl_certificate     /usr/local/nginx/ssl/server.crt;
        #ssl_certificate_key /usr/local/nginx/ssl/server.key;
        server_name     localhost;

        location /channels-stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            push_stream_channels_path               $arg_id;
        }

        location /pub {
            # activate publisher (admin) mode for this location
            push_stream_publisher admin;

            # query string based channel id
            push_stream_channels_path               $arg_id;
        }

        location ~ /ws/(.*) {
            # activate websocket mode for this location
            push_stream_subscriber websocket;

            # positional channel path
            push_stream_channels_path                   $1;
            # message template
            push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";

            push_stream_websocket_allow_publish         on;

            # ping frequency
            push_stream_ping_message_interval           10s;
        }


        location ~ /ev/(.*) {
            # activate event source mode for this location
            push_stream_subscriber eventsource;

            # positional channel path
            push_stream_channels_path                   $1;
            # message template
            push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";

            # ping frequency
            push_stream_ping_message_interval           10s;
        }


        location ~ /lp/(.*) {
            # activate long-polling mode for this location
            push_stream_subscriber      long-polling;

            # positional channel path
            push_stream_channels_path         $1;

            # message template
            push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";

            # connection timeout
            push_stream_longpolling_connection_ttl        30s;
        }


        location ~ /sub/(.*) {
            auth_request http://localhost:9000/?is_auth;
            # activate subscriber (streaming) mode for this location
            push_stream_subscriber;

            # positional channel path
            push_stream_channels_path                   $1;

            # header to be sent when receiving new subscriber connection
            push_stream_header_template                 "";
            # message template
            push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\"}";
            # footer to be sent when finishing subscriber connection
            push_stream_footer_template                 "";
            # content-type
            default_type                                "text/html; charset=utf-8";
            # ping frequency
            push_stream_ping_message_interval           10s;
        }




        location / {
            if (!-f $request_filename) {
              proxy_pass "http://localhost:8888";
            }
        }
    }
}